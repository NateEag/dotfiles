#!/usr/bin/expect

# Script to use [pass](https://www.passwordstore.org/) to start interactive
# SSH sessions for destinations pass has the username/password for.
#
# The proper answer to passwordless (or low-password) logins is, of course, SSH
# keys, and they're the right answer.
#
# Sometimes, though, one works on infrastructure where passwords are what's
# used, and changing that is not the highest priority.
#
# In such cases, this can save some suffering.
#
# I believe this approach is fairly secure - since expect is directly executing
# the pass command to decrypt the password, then supplying it interactively to
# SSH, the password is not passed as a command-line argument anywhere, nor is
# it ever stored as plaintext in an environment variable or file (some
# approaches to password management can leave the plaintext password in a shell
# history file or an editor's swapfile, which this should not do).
#
# A sufficiently-motivated attacker could probably find a way to extract the
# decrypted password out of the process's memory while you're using the child
# SSH process interactively - the OS tries to protect you from that, but humans
# aren't perfect and neither are OSes.
#
# In hopes of mitigating that a little, we unset the variable after we're done
# using it, but I don't know how Tcl does vars under the hood - there's an
# excellent chance the password remains in memory as garbage for a long time,
# maybe the lifetime of the process.
#
# The main risk here, though, is the one introduced by using pass at all, which
# is that anyone with physical access to your machine can dig out any of the
# passwords you have saved, if you use GPG in a way that doesn't require you
# to type your master password on every password decryption (that is, if you're
# favoring usability over security).
#
# sshpass exists to automatically send a password into SSH, but allows doing so
# in a less secure manner and doesn't have support for using the pass command
# directly. This script came to exist because I already had a collection of
# encrypted passwords for use with the pass password manager, and I thought "It
# *has* to be possible to just feed these into SSH."
#
# All that said, I'm not a security expert, and it's quite possible I'm missing
# something important in this analysis. Use at your own risk.
#
# Such as it is, this file is under the MIT license:
#
# https://opensource.org/licenses/MIT

set program_name [info script]
set program_name [file tail "$program_name"]

# TODO Derive the password_path from user/hostname. First try exact match,
# followed by hostname/username, then just username. If none have a hit, throw
# an error and tell the user to pass one explicitly.
if { $argc < 1 } {
    puts "Usage: $program_name user@hostname \[password_path\]"
    puts ""
    puts "If `password_path` is not passed, this script tries to get the"
    puts "password from the password store at \$hostname/\$user. If none is found"
    puts "it will look for a password under \$user."
    puts ""
    puts "If `password_path` is passed explicitly it is used blindly."

    exit 2
}

set ssh_dest [lindex $argv 0]

set ssh_info [split $ssh_dest "@"]

set username [lindex $ssh_info 0]
set hostname [lindex $ssh_info 1]

if { $argc > 1 } {
    set pass_file [lindex $argv 1]
} else {
    set pass_file [concat $hostname/$username]

    set result [catch {exec pass show $pass_file}]

    if { $result != 0 } {
        set pass_file "$username"
    }
}

set password [exec pass show $pass_file]

eval spawn ssh $ssh_dest

# TODO Figure out a reasonable way to make Tcl treat the prompt regex as
# case-insensitive.
set prompt "(Password|password):|#|\\\$"
interact -o -nobuffer -re "$prompt" return
send "$password\r"

unset password

interact
