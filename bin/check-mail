#! /bin/bash

# I've started experimenting with mbsync for fetching mail on my work machine.
#
# It seems to be faster and cleaner than offlineimap, but it doesn't have hooks
# built-in.
#
# Therefore, I have this tiny wrapper script to simulate that job.

lockfile_path="$HOME/.check-mail-active"

# This lockfile / trap combination is intended to make it safe for me to run
# this script whenever I feel like it, without worrying about the fact that
# there's a cron job scheduled to run it every five minutes.
#
# The logic has a race condition, I think. In principle two runs could start
# nigh-simultaneously and get executed such that each one passes the "does the
# file exist?" check before the other one manages to create the file.
#
# In practice it's been working okay.
#
# That said, I have to clean it up by hand in event of a power outage or
# similar hard interruption that keeps the trap from running.
if [ -f "$lockfile_path" ]; then
    exit
fi

touch "$lockfile_path"

cleanup() {
    rm -f "$lockfile_path"
}
trap cleanup INT TERM EXIT

# Error out if GPG doesn't have authorization for a key linked to the active
# email address in this session.
#
# The technique, which works only with GPG 2, was found on SO:
# https://unix.stackexchange.com/a/342461
#
# TODO Figure out a more elegant way to check this.
keygrip=$(gpg --fingerprint --with-keygrip "$EMAIL" |
              grep 'Keygrip = ' |
              head -1 |
              sed 's/^.*Keygrip = \([A-F0-9]\)/\1/')

key_loaded=$(echo "KEYINFO --no-ask $keygrip Err Pmt Des" |
                  gpg-connect-agent --no-autostart |
                  sed -n 2p)

# This check doesn't seem to do what I want. I don't always get notifications
# when I wind up being required to authenticate to get the mail check working.
if [ "$key_loaded" != 'OK' ]; then
    msg='GPG key not loaded; aborting mail check'

    # TODO Output this to stderr and notify when cron error logs grow. That
    # would be a much more general solution.
    notify "$msg"

    exit 1
fi


mbsync "$1"

if [ $? -ne 0 ]; then
    echo "mbsync failed!" >&2

    exit 1
fi


# TODO I should arguably just call my offlineimap-postsync script in here. In
# turn, I guess that script should maybe just be named 'check-mail-postsync',
# since it's actually just running after syncs, no matter what program you use
# for the syncing.
notmuch new
