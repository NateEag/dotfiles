#! /usr/bin/env bash

# Simple wrapper around notification commands and sleep to send messages after
# a set amount of time has passed.
#
# TODO Use the at command instead of sleep?

script_name=$(basename "$0")
usage_msg="Send a notification after a certain amount of time has passed.

If you want to cancel a timer, 'pgrep -lf timer' should help you find the
processes to kill, from whence pkill can be handy (using the timer message to
target the specific timer you want to cancel).

If <length> is an integer it is the number of minutes to wait before notifying.
If it looks roughly like a time string, it is passed to the date command to
compute a stop time. '3:20', '17:00', and '4:45 PM' are all valid values. It
does a simple sanity check but don't expect it to be ingenious.

Usage: $script_name <message> <length>"

if [ "$1" = '--help' ]; then
    echo "$usage_msg"

    exit
elif [ $# -ne 2 ]; then
    echo "$usage_msg" >&2

    exit 2
fi

is-int () {
    [[ "$1" =~ ^[0-9]+$ ]]

    return $?
}

is-clock-time() {
    if [[ "$1" =~ ^[0-2]*[0-9]:[0-5][0-9].* ]]; then
          return 0
    fi

    return 1
}


if is-clock-time "$2"; then
    now="$(gdate +%s)"
    then="$(gdate -d "$2" +%s)"
    (( seconds = then - now ))
elif is-int "$2"; then
    seconds="$(( $2 * 60 ))"
else
    echo "$2 is not a valid stop time!" >&2

    exit 1
fi

applescript="display notification \"$1\" with title \"Time's up\" "
$(sleep "$seconds" && osascript -e "$applescript") &
