// Generated by CoffeeScript 1.6.3
var Q, cli, colors, formatArchived, formatExpires, formatFile, formatOvaed, formatRearms, formatStatus, formatStatusName, moment, statusAttrs;

Q = require('q');

colors = require('colors');

moment = require('moment');

cli = require('../cli');

statusAttrs = ['statusName', 'ovaed', 'archived', 'expires', 'rearmsLeft', 'ievmsVersion'];

formatStatusName = function(status) {
  var color;
  color = (function() {
    switch (status) {
      case 'MISSING':
        return 'red';
      case 'RUNNING':
        return 'green';
      default:
        return 'yellow';
    }
  })();
  return status[color];
};

formatExpires = function(expires) {
  var color, days, msg;
  if (expires == null) {
    return '';
  }
  days = moment(expires).diff(new Date, 'days');
  msg = days < 1 ? 'expired' : 'expires';
  color = days <= 1 ? 'red' : days <= 7 ? 'yellow' : 'green';
  return ("" + msg[color] + " " + (moment(expires).fromNow())).trim();
};

formatRearms = function(rearmsLeft) {
  var color, rearms;
  if (rearmsLeft == null) {
    return '';
  }
  color = (function() {
    switch (rearmsLeft) {
      case 0:
        return 'red';
      case 1:
        return 'yellow';
      default:
        return 'green';
    }
  })();
  rearms = ("" + rearmsLeft)[color];
  return "" + rearms + " rearms left";
};

formatFile = function(name, present) {
  var msg;
  msg = present ? 'present'.green : 'missing'.red;
  return "" + name + " " + msg;
};

formatOvaed = function(ovaed) {
  return formatFile('ova', ovaed);
};

formatArchived = function(archived) {
  return formatFile('archive', archived);
};

formatStatus = function(vm) {
  var attr;
  return Q.all((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = statusAttrs.length; _i < _len; _i++) {
      attr = statusAttrs[_i];
      _results.push(vm[attr]());
    }
    return _results;
  })()).spread(function(statusName, ovaed, archived, expires, rearmsLeft, version) {
    var rearms, status;
    status = formatStatusName(statusName);
    ovaed = formatOvaed(ovaed);
    archived = formatArchived(archived);
    expires = formatExpires(expires);
    rearms = statusName === 'MISSING' ? '' : formatRearms(rearmsLeft);
    version = "ievms v" + (version != null ? version : 'unknown'.red);
    return cli.columns(vm.name, status, ovaed, archived, expires, rearms, version);
  });
};

module.exports = function(program) {
  return program.command('status [names]').description('report the status of one or more vms').option('-m, --missing', 'show VMs that are not installed').action(function(names, command) {
    return cli.fail(cli.find(names).maybeWhere(!command.missing, '!missing').found().all(formatStatus, true).then(function(statuses) {
      var status, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = statuses.length; _i < _len; _i++) {
        status = statuses[_i];
        _results.push(console.log(status));
      }
      return _results;
    }));
  });
};
