// Generated by CoffeeScript 1.6.3
var IEVM, Q, child_process, debug, fs, http, path, url,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

fs = require('fs');

path = require('path');

Q = require('q');

url = require('url');

http = require('http');

child_process = require('child_process');

debug = require('debug');

IEVM = (function() {
  var _ref, _ref1;

  IEVM.versions = [6, 7, 8, 9, 10, 11];

  IEVM.oses = ['WinXP', 'Vista', 'Win7', 'Win8'];

  IEVM.names = ['IE6 - WinXP', 'IE7 - WinXP', 'IE8 - WinXP', 'IE7 - Vista', 'IE8 - Win7', 'IE9 - Win7', 'IE10 - Win7', 'IE10 - Win8', 'IE11 - Win7'];

  IEVM.status = {
    MISSING: -1,
    POWEROFF: 0,
    RUNNING: 1,
    PAUSED: 2,
    SAVED: 3
  };

  IEVM.rearms = {
    WinXP: 0,
    Vista: 0,
    Win7: 5,
    Win8: 0
  };

  IEVM.ievmsHome = (_ref = process.env.INSTALL_PATH) != null ? _ref : path.join(process.env.HOME, '.ievms');

  IEVM.ievmsUrl = 'https://raw.githubusercontent.com/xdissent/ievms/master/ievms.sh';

  IEVM.ievmsCmd = (_ref1 = process.env.IEVMS_CMD) != null ? _ref1 : "curl -s " + IEVM.ievmsUrl + " | bash";

  IEVM.hostIp = '10.0.2.2';

  IEVM.ievms = function(env, debug) {
    var cmd, deferred, ievms;
    deferred = Q.defer();
    cmd = ['bash', '-c', this.ievmsCmd];
    if (debug != null) {
      debug("ievms: " + (cmd.join(' ')));
    }
    ievms = child_process.spawn(cmd.shift(), cmd, {
      env: env
    });
    ievms.on('error', function(err) {
      return deferred.reject(err);
    });
    ievms.on('exit', function() {
      return deferred.resolve(true);
    });
    if (debug != null) {
      ievms.stdout.on('readable', function() {
        var l, out, _i, _len, _ref2, _results;
        out = ievms.stdout.read();
        if (out != null) {
          _ref2 = out.toString().trim().split("\n");
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            l = _ref2[_i];
            _results.push(debug("ievms: " + l));
          }
          return _results;
        }
      });
    }
    return deferred.promise;
  };

  IEVM.all = function() {
    var n, _i, _len, _ref2, _results;
    _ref2 = this.names;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      n = _ref2[_i];
      _results.push(new this(n));
    }
    return _results;
  };

  IEVM.find = function(name) {
    var n, _i, _len, _ref2, _ref3, _results;
    if (name == null) {
      throw new Error('No name specified');
    }
    if (typeof name !== 'string' && typeof name !== 'number') {
      throw new Error("Invalid name: '" + name + "'");
    }
    if (name.match(/^IE/)) {
      return [new IEVM(name)];
    }
    if (name.match(/^(Win|Vista)/)) {
      return (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.names;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          n = _ref2[_i];
          if (n.match("- " + name)) {
            _results.push(new IEVM(n));
          }
        }
        return _results;
      }).call(this);
    }
    if (!name.match(/^\d+$/) || (_ref2 = parseInt(name), __indexOf.call(this.versions, _ref2) < 0)) {
      throw new Error("Invalid name: '" + name + "'");
    }
    _ref3 = this.names;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      n = _ref3[_i];
      if (n.match("IE" + name)) {
        _results.push(new IEVM(n));
      }
    }
    return _results;
  };

  IEVM.vbm = function(cmd, args) {
    var a;
    if (args == null) {
      args = [];
    }
    args = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        a = args[_i];
        _results.push("'" + a + "'");
      }
      return _results;
    })()).join(' ');
    return "VBoxManage " + cmd + " " + args;
  };

  IEVM.parseHdds = function(s) {
    var chunk, hdd, hdds, line, pieces, _i, _j, _len, _len1, _ref2, _ref3;
    hdds = {};
    _ref2 = s.split("\n\n");
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      chunk = _ref2[_i];
      hdd = {};
      _ref3 = chunk.split("\n");
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        line = _ref3[_j];
        pieces = line.split(':');
        hdd[pieces.shift()] = pieces.join(':').trim();
      }
      hdds[hdd.UUID] = hdd;
    }
    return hdds;
  };

  IEVM.hdds = function() {
    var deferred,
      _this = this;
    deferred = Q.defer();
    child_process.exec(this.vbm('list', ['hdds']), function(err, stdout, stderr) {
      if (err != null) {
        return deferred.reject(err);
      }
      return deferred.resolve(_this.parseHdds(stdout));
    });
    return deferred.promise;
  };

  IEVM.statusName = function(status) {
    var k, v;
    return ((function() {
      var _ref2, _results;
      _ref2 = this.status;
      _results = [];
      for (k in _ref2) {
        v = _ref2[k];
        if (v === status) {
          _results.push(k);
        }
      }
      return _results;
    }).call(this))[0];
  };

  function IEVM(name) {
    var pieces, _ref2, _ref3, _ref4;
    this.name = name;
    if (_ref2 = this.name, __indexOf.call(this.constructor.names, _ref2) < 0) {
      throw new Error("Invalid name: '" + this.name + "'");
    }
    pieces = this.name.split(' ');
    this.version = parseInt(pieces[0].replace('IE', ''));
    if (_ref3 = this.version, __indexOf.call(this.constructor.versions, _ref3) < 0) {
      throw new Error("Invalid version: '" + this.version + "'");
    }
    this.os = pieces.pop();
    if (_ref4 = this.os, __indexOf.call(this.constructor.oses, _ref4) < 0) {
      throw new Error("Invalid OS: '" + this.os + "'");
    }
  }

  IEVM.prototype.ensureMissing = function() {
    return this.missing().then(function(missing) {
      return missing || (function() {
        throw new Error('not missing');
      })();
    });
  };

  IEVM.prototype.ensureNotMissing = function() {
    return this.missing().then(function(missing) {
      return !missing || (function() {
        throw new Error('missing');
      })();
    });
  };

  IEVM.prototype.ensureRunning = function() {
    return this.running().then(function(running) {
      return running || (function() {
        throw new Error('not running');
      })();
    });
  };

  IEVM.prototype.ensureNotRunning = function() {
    return this.running().then(function(running) {
      return !running || (function() {
        throw new Error('running');
      })();
    });
  };

  IEVM.prototype.ensureRearmsLeft = function() {
    return this.rearmsLeft().then(function(rearmsLeft) {
      return rearmsLeft > 0 || (function() {
        throw new Error('no rearms left');
      })();
    });
  };

  IEVM.prototype.ensureArchived = function() {
    return this.archived().then(function(archived) {
      return archived || (function() {
        throw new Error('archive not present');
      })();
    });
  };

  IEVM.prototype.ensureOvaed = function() {
    return this.ovaed().then(function(ovaed) {
      return ovaed || (function() {
        throw new Error('ova not present');
      })();
    });
  };

  IEVM.prototype.start = function(headless) {
    var _this = this;
    if (headless == null) {
      headless = false;
    }
    return this.ensureNotMissing().then(function() {
      return _this.ensureNotRunning().then(function() {
        var type;
        type = headless ? 'headless' : 'gui';
        _this.debug("start: " + type);
        return _this.vbm('startvm', '--type', type).then(function() {
          return _this.waitForRunning();
        });
      });
    });
  };

  IEVM.prototype.stop = function(save) {
    var _this = this;
    if (save == null) {
      save = true;
    }
    return this.ensureNotMissing().then(function() {
      return _this.ensureRunning().then(function() {
        var type;
        type = save ? 'savestate' : 'poweroff';
        _this.debug("stop: " + type);
        return _this.vbm('controlvm', type).then(function() {
          return _this.waitForNotRunning();
        });
      });
    });
  };

  IEVM.prototype.restart = function() {
    var _this = this;
    return this.ensureNotMissing().then(function() {
      return _this.ensureRunning().then(function() {
        _this.debug('restart');
        return _this.exec('shutdown.exe', '/r', '/t', '00').then(function() {
          return _this.waitForNoGuestControl().then(function() {
            return _this.waitForGuestControl();
          });
        });
      });
    });
  };

  IEVM.prototype.open = function(url, wait) {
    var _this = this;
    if (wait == null) {
      wait = false;
    }
    return this.ensureNotMissing().then(function() {
      return _this.ensureRunning().then(function() {
        return _this.waitForNetwork().then(function() {
          _this.debug("open: " + url);
          if (wait) {
            return _this.exec('C:\\Program Files\\Internet Explorer\\iexplore.exe', url);
          }
          return _this.exec('cmd.exe', '/c', 'start', 'C:\\Program Files\\Internet Explorer\\iexplore.exe', url);
        });
      });
    });
  };

  IEVM.prototype.close = function() {
    var _this = this;
    return this.ensureNotMissing().then(function() {
      return _this.ensureRunning().then(function() {
        _this.debug('close');
        return _this.exec('taskkill.exe', '/f', '/im', 'iexplore.exe').fail(function() {
          return Q(true);
        });
      });
    });
  };

  IEVM.prototype.rearm = function(delay) {
    var _this = this;
    if (delay == null) {
      delay = 30000;
    }
    return this.ensureNotMissing().then(function() {
      return _this.ensureRunning().then(function() {
        return _this.ensureRearmsLeft().then(function() {
          return _this.waitForNetwork().then(function() {
            _this.debug('rearm');
            return _this.rearmPrep('rearm').then(function() {
              return _this.ievmsTask().then(function() {
                return _this.meta().then(function(meta) {
                  var _ref2;
                  meta.rearms = ((_ref2 = meta.rearms) != null ? _ref2 : []).concat((new Date).getTime());
                  return _this.meta(meta).then(function() {
                    return Q.delay(delay).then(function() {
                      return _this.restart().then(function() {
                        return _this.rearmPrep('ato').then(function() {
                          return _this.ievmsTask().then(function() {
                            return Q.delay(delay).then(function() {
                              return _this.restart();
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  };

  IEVM.prototype.uninstall = function() {
    var _this = this;
    return this.ensureNotMissing().then(function() {
      return _this.ensureNotRunning().then(function() {
        _this.debug('uninstall');
        return _this.vbm('unregistervm', '--delete');
      });
    });
  };

  IEVM.prototype.install = function() {
    var _this = this;
    return this.ensureMissing().then(function() {
      _this.debug('install');
      return _this.constructor.ievms(_this.ievmsEnv(), _this.debug.bind(_this));
    });
  };

  IEVM.prototype.reinstall = function() {
    var _this = this;
    return this.uninstall().then(function() {
      return _this.install();
    });
  };

  IEVM.prototype.clean = function() {
    var _this = this;
    return this.ensureNotMissing().then(function() {
      return _this.ensureNotRunning().then(function() {
        _this.debug('clean');
        return _this.vbm('snapshot', 'restore', 'clean').then(function() {
          return _this.meta().then(function(meta) {
            meta.rearms = [];
            return _this.meta(meta);
          });
        });
      });
    });
  };

  IEVM.prototype.unarchive = function() {
    var _this = this;
    return this.ensureArchived().then(function() {
      _this.debug('unarchive');
      return Q.nfcall(fs.unlink, _this.fullArchive());
    });
  };

  IEVM.prototype.unova = function() {
    var _this = this;
    return this.ensureOvaed().then(function() {
      _this.debug('unova');
      return Q.nfcall(fs.unlink, _this.fullOva());
    });
  };

  IEVM.prototype.exec = function() {
    var args, cmd,
      _this = this;
    cmd = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.ensureNotMissing().then(function() {
      return _this.ensureRunning().then(function() {
        return _this.waitForGuestControl().then(function() {
          return _this.ievmsVersion().then(function(version) {
            var pass;
            _this.debug("exec: " + cmd + " " + (args.join(' ')));
            pass = ['--password', 'Passw0rd!'];
            if (_this.os === 'WinXP' && (version == null)) {
              pass = [];
            }
            args = ['exec', '--image', cmd, '--wait-exit', '--username', 'IEUser'].concat(__slice.call(pass), ['--'], __slice.call(args));
            return _this.vbm.apply(_this, ['guestcontrol'].concat(__slice.call(args)));
          });
        });
      });
    });
  };

  IEVM.prototype.screenshot = function(file) {
    var _this = this;
    return this.ensureNotMissing().then(function() {
      return _this.ensureRunning().then(function() {
        _this.debug('screenshot');
        return _this.vbm('controlvm', 'screenshotpng', file);
      });
    });
  };

  IEVM.prototype.archive = function() {
    var _ref2, _ref3;
    if ((_ref2 = this.name) === 'IE7 - WinXP' || _ref2 === 'IE8 - WinXP') {
      return 'IE6_WinXP.zip';
    }
    if ((_ref3 = this.name) === 'IE10 - Win7' || _ref3 === 'IE11 - Win7') {
      return 'IE9_Win7.zip';
    }
    return "" + (this.name.replace(' - ', '_')) + ".zip";
  };

  IEVM.prototype.fullArchive = function() {
    return path.join(this.constructor.ievmsHome, this.archive());
  };

  IEVM.prototype.ova = function() {
    var _ref2, _ref3;
    if ((_ref2 = this.name) === 'IE7 - WinXP' || _ref2 === 'IE8 - WinXP') {
      return 'IE6 - WinXP.ova';
    }
    if ((_ref3 = this.name) === 'IE10 - Win7' || _ref3 === 'IE11 - Win7') {
      return 'IE9 - Win7.ova';
    }
    return "" + this.name + ".ova";
  };

  IEVM.prototype.fullOva = function() {
    return path.join(this.constructor.ievmsHome, this.ova());
  };

  IEVM.prototype.url = function() {
    return 'http://virtualization.modern.ie/vhd/IEKitV1_Final/VirtualBox/OSX/' + this.archive();
  };

  IEVM.prototype.info = function(retries, delay) {
    var _this = this;
    if (retries == null) {
      retries = 3;
    }
    if (delay == null) {
      delay = 250;
    }
    return this.vbm('showvminfo', '--machinereadable').then(this.parseInfo).fail(function(err) {
      if (err.message.match(/VBOX_E_OBJECT_NOT_FOUND/)) {
        return Q({
          VMState: 'missing'
        });
      }
      if (retries > 0 && err.message.match(/E_ACCESSDENIED/)) {
        _this.debug("info: retrying (" + (retries - 1) + " retries left)");
        return _this.info(retries - 1, delay);
      }
      throw err;
    });
  };

  IEVM.prototype.status = function() {
    var _this = this;
    return this.statusName().then(function(key) {
      return _this.constructor.status[key];
    });
  };

  IEVM.prototype.statusName = function() {
    return this.info().then(function(info) {
      return info.VMState.toUpperCase();
    });
  };

  IEVM.prototype.uploaded = function() {
    var deferred, opts, req,
      _this = this;
    if (this._uploaded != null) {
      return Q(this._uploaded);
    }
    deferred = Q.defer();
    opts = url.parse(this.url());
    opts.method = 'HEAD';
    req = http.request(opts, function(res) {
      res.on('data', function(chunk) {});
      _this._uploaded = new Date(res.headers['last-modified']);
      return deferred.resolve(_this._uploaded);
    });
    req.on('error', function(err) {
      return deferred.reject(err);
    });
    req.end();
    return deferred.promise;
  };

  IEVM.prototype.meta = function(data) {
    if (data != null) {
      return this.setMeta(data);
    } else {
      return this.getMeta();
    }
  };

  IEVM.prototype.missing = function() {
    var _this = this;
    return this.status().then(function(status) {
      return status === _this.constructor.status.MISSING;
    });
  };

  IEVM.prototype.running = function() {
    var _this = this;
    return this.status().then(function(status) {
      return status === _this.constructor.status.RUNNING;
    });
  };

  IEVM.prototype.expired = function() {
    var _this = this;
    return this.expires().then(function(expires) {
      return (expires == null) || expires < new Date;
    });
  };

  IEVM.prototype.archived = function() {
    var deferred;
    deferred = Q.defer();
    fs.exists(this.fullArchive(), function(archived) {
      return deferred.resolve(archived);
    });
    return deferred.promise;
  };

  IEVM.prototype.ovaed = function() {
    var deferred;
    deferred = Q.defer();
    fs.exists(this.fullOva(), function(ovaed) {
      return deferred.resolve(ovaed);
    });
    return deferred.promise;
  };

  IEVM.prototype.expires = function() {
    var _this = this;
    return this.missing().then(function(missing) {
      var ninetyDays, thirtyDays;
      if (missing) {
        return null;
      }
      thirtyDays = 30 * 1000 * 60 * 60 * 24;
      ninetyDays = thirtyDays * 3;
      if (_this.os === 'WinXP') {
        return _this.hddCreated().then(function(created) {
          return new Date(created.getTime() + thirtyDays);
        });
      }
      return _this.rearmDates().then(function(rearms) {
        if (rearms.length > 0) {
          return new Date(rearms[rearms.length - 1].getTime() + ninetyDays);
        } else {
          return _this.hddCreated().then(function(created) {
            return new Date(created.getTime() + ninetyDays);
          });
        }
      });
    });
  };

  IEVM.prototype.rearmDates = function() {
    var _this = this;
    return this.meta().then(function(meta) {
      var d, _i, _len, _ref2, _results;
      if (!((meta.rearms != null) && (meta.rearms.length != null))) {
        return [];
      }
      _ref2 = meta.rearms;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        d = _ref2[_i];
        _results.push(new Date(d));
      }
      return _results;
    });
  };

  IEVM.prototype.rearmsLeft = function() {
    var _this = this;
    return this.rearmDates().then(function(rearms) {
      return _this.constructor.rearms[_this.os] - rearms.length;
    });
  };

  IEVM.prototype.ievmsVersion = function() {
    return this.meta().then(function(meta) {
      return meta.version;
    });
  };

  IEVM.prototype.debug = function(msg) {
    if (this._debug == null) {
      this._debug = debug("iectrl:" + this.name);
    }
    return this._debug(msg);
  };

  IEVM.prototype.ievmsEnv = function() {
    var _ref2, _ref3;
    return {
      IEVMS_VERSIONS: this.version,
      REUSE_XP: ((_ref2 = this.version) === 7 || _ref2 === 8) && this.os === 'WinXP' ? 'yes' : 'no',
      REUSE_WIN7: ((_ref3 = this.version) === 10 || _ref3 === 11) && this.os === 'Win7' ? 'yes' : 'no',
      INSTALL_PATH: this.constructor.ievmsHome,
      HOME: process.env.HOME,
      PATH: process.env.PATH
    };
  };

  IEVM.prototype.vbm = function() {
    var args,
      _this = this;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if ((this._vbmQueue == null) || this._vbmQueue.isRejected()) {
      this._vbmQueue = Q();
    }
    return this._vbmQueue = this._vbmQueue.then(function() {
      var command, deferred;
      deferred = Q.defer();
      command = _this.constructor.vbm(args.shift(), [_this.name].concat(args));
      child_process.exec(command, function(err, stdout, stderr) {
        if (err != null) {
          return deferred.reject(err);
        }
        return deferred.resolve(stdout);
      });
      return deferred.promise;
    });
  };

  IEVM.prototype.parseInfo = function(s) {
    var line, obj, pieces, _i, _len, _ref2;
    obj = {};
    _ref2 = s.trim().split("\n");
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      line = _ref2[_i];
      pieces = line.split('=');
      obj[pieces.shift()] = pieces.join('=').replace(/^"/, '').replace(/"$/, '');
    }
    return obj;
  };

  IEVM.prototype.parseMeta = function(data) {
    return JSON.parse(data.replace('Value: ', ''));
  };

  IEVM.prototype.setMeta = function(data) {
    return this.vbm('setextradata', 'ievms', JSON.stringify(data));
  };

  IEVM.prototype.getMeta = function() {
    return this.vbm('getextradata', 'ievms').then(this.parseMeta).fail(function(err) {
      return Q({});
    });
  };

  IEVM.prototype.rearmPrep = function(cmd) {
    return this.exec('cmd.exe', '/c', "echo slmgr.vbs /" + cmd + " >C:\\Users\\IEUser\\ievms.bat");
  };

  IEVM.prototype.ievmsTask = function() {
    return this.exec('schtasks.exe', '/run', '/tn', 'ievms');
  };

  IEVM.prototype.hddUuid = function() {
    var _this = this;
    return this.info().then(function(info) {
      var _ref2;
      return (_ref2 = info['"SATA Controller-ImageUUID-0-0"']) != null ? _ref2 : info['"IDE Controller-ImageUUID-0-0"'];
    });
  };

  IEVM.prototype.hdd = function() {
    var _this = this;
    return this.constructor.hdds().then(function(hdds) {
      return _this.hddUuid().then(function(uid) {
        if (!((uid != null) && hdds[uid])) {
          return null;
        }
        while (hdds[uid]['Parent UUID'] !== 'base') {
          uid = hdds[uid]['Parent UUID'];
        }
        return hdds[uid];
      });
    });
  };

  IEVM.prototype.hddStat = function() {
    var _this = this;
    return this.hdd().then(function(hdd) {
      return Q.nfcall(fs.stat, hdd.Location);
    });
  };

  IEVM.prototype.hddCreated = function() {
    var _this = this;
    return this.hddStat().then(function(stat) {
      return stat.mtime;
    });
  };

  IEVM.prototype._waitForStatus = function(statuses, deferred, delay) {
    var s, statusNames,
      _this = this;
    if (delay == null) {
      delay = 1000;
    }
    statuses = [].concat(statuses);
    statusNames = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = statuses.length; _i < _len; _i++) {
        s = statuses[_i];
        _results.push(this.constructor.statusName(s));
      }
      return _results;
    }).call(this)).join(', ');
    this.debug("_waitForStatus: " + statusNames);
    if (deferred.promise.isRejected()) {
      return null;
    }
    return this.status().then(function(status) {
      if (__indexOf.call(statuses, status) >= 0) {
        return deferred.resolve(status);
      }
      return Q.delay(delay).then(function() {
        return _this._waitForStatus(statuses, deferred, delay);
      });
    });
  };

  IEVM.prototype.waitForRunning = function(timeout, delay) {
    var deferred;
    if (timeout == null) {
      timeout = 60000;
    }
    this.debug('waitForRunning');
    deferred = Q.defer();
    this._waitForStatus(this.constructor.status.RUNNING, deferred, delay).fail(function(err) {
      return deferred.reject(err);
    });
    return deferred.promise.timeout(timeout);
  };

  IEVM.prototype.waitForNotRunning = function(timeout, delay) {
    var deferred;
    if (timeout == null) {
      timeout = 60000;
    }
    this.debug('waitForNotRunning');
    deferred = Q.defer();
    this._waitForStatus([this.constructor.status.POWEROFF, this.constructor.status.PAUSED, this.constructor.status.SAVED], deferred, delay).fail(function(err) {
      return deferred.reject(err);
    });
    return deferred.promise.timeout(timeout);
  };

  IEVM.prototype._waitForGuestControl = function(deferred, delay) {
    var _this = this;
    if (delay == null) {
      delay = 1000;
    }
    this.debug('_waitForGuestControl');
    if (deferred.promise.isRejected()) {
      return null;
    }
    return this.info().then(function(info) {
      var runlevel;
      runlevel = info.GuestAdditionsRunLevel;
      _this.debug("_waitForGuestControl: runlevel " + runlevel);
      if ((runlevel != null) && parseInt(runlevel) > 2) {
        return deferred.resolve(true);
      }
      return Q.delay(delay).then(function() {
        return _this._waitForGuestControl(deferred, delay);
      });
    });
  };

  IEVM.prototype.waitForGuestControl = function(timeout, delay) {
    var _this = this;
    if (timeout == null) {
      timeout = 60000;
    }
    return this.waitForRunning().then(function() {
      var deferred;
      deferred = Q.defer();
      _this._waitForGuestControl(deferred, delay).fail(function(err) {
        return deferred.reject(err);
      });
      return deferred.promise.timeout(timeout);
    });
  };

  IEVM.prototype._waitForNoGuestControl = function(deferred, delay) {
    var _this = this;
    if (delay == null) {
      delay = 1000;
    }
    this.debug('_waitForNoGuestControl');
    if (deferred.promise.isRejected()) {
      return null;
    }
    return this.info().then(function(info) {
      var runlevel;
      runlevel = info.GuestAdditionsRunLevel;
      _this.debug("waitForNoGuestControl: runlevel " + runlevel);
      if ((runlevel == null) || parseInt(runlevel) < 2) {
        return deferred.resolve(true);
      }
      return Q.delay(delay).then(function() {
        return _this._waitForNoGuestControl(deferred, delay);
      });
    });
  };

  IEVM.prototype.waitForNoGuestControl = function(timeout, delay) {
    var deferred;
    if (timeout == null) {
      timeout = 60000;
    }
    deferred = Q.defer();
    this._waitForNoGuestControl(deferred, delay).fail(function(err) {
      return deferred.reject(err);
    });
    return deferred.promise.timeout(timeout);
  };

  IEVM.prototype.waitForNetwork = function(host, retries, delay) {
    var _this = this;
    if (host == null) {
      host = this.constructor.hostIp;
    }
    if (retries == null) {
      retries = 5;
    }
    if (delay == null) {
      delay = 3000;
    }
    this.debug('waitForNetwork');
    return this.exec('ping.exe', host, '-n', '1').fail(function(err) {
      if (retries <= 0) {
        throw err;
      }
      return Q.delay(delay).then(function() {
        if (retries > 0) {
          return _this.waitForNetwork(host, retries - 1, delay);
        }
      });
    });
  };

  return IEVM;

})();

module.exports = IEVM;
