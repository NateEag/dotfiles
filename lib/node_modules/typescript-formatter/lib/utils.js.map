{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as expand from \"glob-expand\";\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport function createDefaultFormatCodeSettings(): ts.FormatCodeSettings {\n\n    return {\n        indentSize: 4,\n        tabSize: 4,\n        indentStyle: ts.IndentStyle.Smart,\n        newLineCharacter: \"\\r\\n\",\n        convertTabsToSpaces: true,\n        insertSpaceAfterCommaDelimiter: true,\n        insertSpaceAfterSemicolonInForStatements: true,\n        insertSpaceBeforeAndAfterBinaryOperators: true,\n        insertSpaceAfterKeywordsInControlFlowStatements: true,\n        insertSpaceAfterFunctionKeywordForAnonymousFunctions: false,\n        insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n        insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n        insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\n        placeOpenBraceOnNewLineForFunctions: false,\n        placeOpenBraceOnNewLineForControlBlocks: false,\n    };\n}\n\nexport function getConfigFileName(baseDir: string, configFileName: string): string | null {\n\n    let configFilePath = path.resolve(baseDir, configFileName);\n    if (fs.existsSync(configFilePath)) {\n        return configFilePath;\n    }\n\n    if (baseDir.length === path.dirname(baseDir).length) {\n        return null;\n    }\n\n    return getConfigFileName(path.resolve(baseDir, \"../\"), configFileName);\n}\n\nexport function readFilesFromTsconfig(configPath: string): string[] {\n\n    interface TsConfigJSON {\n        files?: string[];\n        filesGlob?: string[];\n        include?: string[];\n        exclude?: string[];\n    }\n\n    let tsconfigDir = path.dirname(configPath);\n    let tsconfig: TsConfigJSON = parseJSON(fs.readFileSync(configPath, \"utf-8\"));\n    if (tsconfig.files && (tsconfig.include || tsconfig.exclude)) {\n        return tsconfig.files.concat(tsMatchFiles(tsconfig.exclude || [], tsconfig.include || []));\n    } else if (tsconfig.files) {\n        let files: string[] = tsconfig.files;\n        return files.map(filePath => path.resolve(tsconfigDir, filePath));\n    } else if (tsconfig.filesGlob) {\n        return expand({ filter: \"isFile\", cwd: tsconfigDir }, tsconfig.filesGlob);\n    } else if (tsconfig.include || tsconfig.exclude) {\n        return tsMatchFiles(tsconfig.exclude || [], tsconfig.include || []);\n    } else {\n        throw new Error(`No \"files\" or \"filesGlob\" section present in tsconfig.json`);\n    }\n\n    function tsMatchFiles(excludes: string[], includes: string[]) {\n        interface TsMatchFiles {\n            (path: string, extensions: string[], excludes: string[], includes: string[], useCaseSensitiveFileNames: boolean, currentDirectory: string, getFileSystemEntries: (path: string) => TsFileSystemEntries): string[];\n        }\n        interface TsFileSystemEntries {\n            files: string[];\n            directories: string[];\n        }\n\n        let f: TsMatchFiles = (ts as any).matchFiles;\n        if (!f) {\n            throw new Error(\"ts.matchFiles is not exists. typescript@^2.0.0 required\");\n        }\n        return f(tsconfigDir, [\".ts\", \".tsx\"], excludes, includes, true, tsconfigDir, dirPath => {\n            let stat = fs.statSync(dirPath);\n            if (stat.isDirectory()) {\n                let result: TsFileSystemEntries = { files: [], directories: [] };\n                let dirEntries = fs.readdirSync(dirPath);\n                dirEntries.forEach(entry => {\n                    let stat = fs.statSync(path.join(dirPath, entry));\n                    if (stat.isDirectory()) {\n                        result.directories.push(entry);\n                    } else if (stat.isFile()) {\n                        result.files.push(entry);\n                    }\n                });\n                return result;\n            }\n            return { files: [], directories: [] };\n        });\n    }\n}\n\nexport function parseJSON(jsonText: string): any {\n    let result = ts.parseConfigFileTextToJson(\"tmp.json\", jsonText);\n    if (result.error) {\n        throw new Error(\"JSON parse error\");\n    }\n\n    return result.config;\n}\n"]}