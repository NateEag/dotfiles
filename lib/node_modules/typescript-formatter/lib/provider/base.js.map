{"version":3,"file":"base.js","sourceRoot":"","sources":["base.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport { Options } from \"../\";\nimport { getConfigFileName, parseJSON } from \"../utils\";\n\ninterface TsfmtSettings {\n    // from FormatCodeOptions\n    // コンマ区切り記号の後にスペースを追加する\n    insertSpaceAfterCommaDelimiter?: boolean;\n    // 'for' ステートメントでセミコロンの後にスペースを挿入する\n    insertSpaceAfterSemicolonInForStatements?: boolean;\n    // 二項演算子の前後にスペースを挿入する\n    insertSpaceBeforeAndAfterBinaryOperators?: boolean;\n    // 制御フローステートメント内のキーワードの後にスペースを追加する\n    insertSpaceAfterKeywordsInControlFlowStatements?: boolean;\n    // 匿名関数に対する関数キーワードの後にスペースを追加する\n    insertSpaceAfterFunctionKeywordForAnonymousFunctions?: boolean;\n    // かっこ内が空でない場合に始め括弧の後ろと終わりカッコの前にスペースを挿入する\n    insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis?: boolean;\n    insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets?: boolean;\n    // template string literalsの括弧内にスペースを挿入する\n    insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces?: boolean;\n    // 新しい行に関数の始め中括弧を配置する\n    placeOpenBraceOnNewLineForFunctions?: boolean;\n    // 新しい行にコントロールブロックの始め中括弧を配置する\n    placeOpenBraceOnNewLineForControlBlocks?: boolean;\n    // from EditorOptions\n    indentSize?: number;\n    // 0, 1, 2 or None, Block, Smart\n    indentStyle?: number | string;\n    tabSize?: number;\n    newLineCharacter?: string;\n    convertTabsToSpaces?: boolean;\n}\n\nexport default function makeFormatCodeOptions(fileName: string, opts: Options, formatSettings: ts.FormatCodeSettings): ts.FormatCodeSettings {\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName = getConfigFileName(baseDir, \"tsfmt.json\");\n    if (!configFileName) {\n        return formatSettings;\n    }\n\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let config: TsfmtSettings = parseJSON(fs.readFileSync(configFileName, \"utf-8\"));\n    if (typeof config.insertSpaceAfterCommaDelimiter === \"boolean\") {\n        formatSettings.insertSpaceAfterCommaDelimiter = config.insertSpaceAfterCommaDelimiter;\n    }\n    if (typeof config.insertSpaceAfterSemicolonInForStatements === \"boolean\") {\n        formatSettings.insertSpaceAfterSemicolonInForStatements = config.insertSpaceAfterSemicolonInForStatements;\n    }\n    if (typeof config.insertSpaceBeforeAndAfterBinaryOperators === \"boolean\") {\n        formatSettings.insertSpaceBeforeAndAfterBinaryOperators = config.insertSpaceBeforeAndAfterBinaryOperators;\n    }\n    if (typeof config.insertSpaceAfterKeywordsInControlFlowStatements === \"boolean\") {\n        formatSettings.insertSpaceAfterKeywordsInControlFlowStatements = config.insertSpaceAfterKeywordsInControlFlowStatements;\n    }\n    if (typeof config.insertSpaceAfterFunctionKeywordForAnonymousFunctions === \"boolean\") {\n        formatSettings.insertSpaceAfterFunctionKeywordForAnonymousFunctions = config.insertSpaceAfterFunctionKeywordForAnonymousFunctions;\n    }\n    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis === \"boolean\") {\n        formatSettings.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis;\n    }\n    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets === \"boolean\") {\n        formatSettings.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets;\n    }\n    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces === \"boolean\") {\n        formatSettings.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces = config.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces;\n    }\n    if (typeof config.placeOpenBraceOnNewLineForFunctions === \"boolean\") {\n        formatSettings.placeOpenBraceOnNewLineForFunctions = config.placeOpenBraceOnNewLineForFunctions;\n    }\n    if (typeof config.placeOpenBraceOnNewLineForControlBlocks === \"boolean\") {\n        formatSettings.placeOpenBraceOnNewLineForControlBlocks = config.placeOpenBraceOnNewLineForControlBlocks;\n    }\n    if (typeof config.indentSize === \"number\") {\n        formatSettings.indentSize = config.indentSize;\n    }\n    if (typeof config.indentStyle === \"number\") {\n        formatSettings.indentStyle = config.indentStyle as number;\n    } else if (typeof config.indentStyle === \"string\") {\n        formatSettings.indentStyle = (ts.IndentStyle as any)[config.indentStyle] as number;\n    }\n    if (typeof config.tabSize === \"number\") {\n        formatSettings.tabSize = config.tabSize;\n    }\n    if (typeof config.newLineCharacter === \"string\") {\n        formatSettings.newLineCharacter = config.newLineCharacter;\n    }\n    if (typeof config.convertTabsToSpaces === \"boolean\") {\n        formatSettings.convertTabsToSpaces = config.convertTabsToSpaces;\n    }\n\n    return formatSettings;\n}\n"]}