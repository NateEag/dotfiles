<?xml version="1.0"?>
<!--
Personal keybindings for OS X, via
[Karabiner](https://pqrs.org/osx/karabiner/index.html.en).

Just symlink this file to "~/Application Support/Karabiner/private.xml".
-->
<root>
    <item>
        <name>Nate E.'s Personal Keybindings</name>
    </item>

    <!-- MacBook Pro internal keyboard bindings.

         Note the use of device_only throughout to preserve normal behavior for
         external keyboards.
    -->

    <!--
        Since I'm used to the [Truly Ergonomic](https://www.trulyergonomic.com)
        layout, I like to have Shift on the home row.

        I use this in conjunction with Seil (nee PCKeyboardHack) to remap the
        internal Caps Lock to Shift.

        Note that I bind a bunch of rules to any Apple device. The intent
        behind that is to apply these keybindings on any internal Apple
        keyboard. The "Don't remap external keyboards" checkbox is insufficient
        for my purposes - since I do use Seil for remapping the internal Caps
        Lock to something else, I also need to remap external Caps Locks back
        to, well, Caps Lock.

        Yeah, it's hacky, but typing comfort is really important to me.
    -->
    <item>
      <name>Return to Shift_R</name>
      <appendix>(+ When you type Return only, send Return)</appendix>
      <identifier>private.return2shiftR_return</identifier>
      <device_only>
          DeviceVendor::APPLE_INC,
          DeviceProduct::ANY
       </device_only>

      <autogen>__KeyOverlaidModifier__ KeyCode::RETURN, KeyCode::SHIFT_R, KeyCode::RETURN</autogen>
    </item>

    <!-- Since I use Seil to remap Caps Lock to F19, Karabiner can't
         distinguish between the physical Caps Lock and Shift keys.

         To remap my physical left Shift key to Control, I have Seil turn it
         into F19, a key my keyboards don't have, then remap that.
    -->
    <item>
      <name>F19 to Control_L (Apple Keyboards)</name>
      <identifier>private.F19TocontrolL</identifier>
      <block>
          <device_only>
              DeviceVendor::APPLE_INC,
              DeviceProduct::ANY
          </device_only>

          <autogen>__KeyToKey__ KeyCode::F19, KeyCode::CONTROL_L</autogen> </block>

      <autogen>__KeyToKey__ KeyCode::F19, KeyCode::CAPSLOCK</autogen>
    </item>

    <!-- As a consequence, when a normal is using my machine, I have to map the
         F19 key to Shift_L, so that in the Default config, Shift behaves
         normally.
    -->
    <item>
      <name>F19 to Shift_L (Apple Keyboards)</name>
      <identifier>private.F19ToshiftL</identifier>
      <block>
          <device_only>
              DeviceVendor::APPLE_INC,
              DeviceProduct::ANY
          </device_only>
          <autogen>__KeyToKey__ KeyCode::F19, KeyCode::SHIFT_L</autogen>
      </block>

      <autogen>__KeyToKey__ KeyCode::F19, KeyCode::CAPSLOCK</autogen>
    </item>

    <item>
      <name>Shift_R to Control_R (Apple Keyboards)</name>
      <identifier>private.shiftR2controlR</identifier>
      <autogen>__KeyToKey__ KeyCode::SHIFT_R, KeyCode::CONTROL_R</autogen>
      <device_only>
          DeviceVendor::APPLE_INC,
          DeviceProduct::ANY
      </device_only>
    </item>

    <!-- Shift_L to Control_L is built-in, but I need it to apply only to
         Apple's internal keyboard, so a custom rule it is. -->
    <item>
      <name>Shift_L to Control_L (Apple Keyboards)</name>
      <identifier>private.shiftL2controlL</identifier>
      <autogen>__KeyToKey__ KeyCode::SHIFT_L, KeyCode::CONTROL_L</autogen>
      <device_only>
          DeviceVendor::APPLE_INC,
          DeviceProduct::ANY
      </device_only>
    </item>


    <!-- For external keyboards, translate F19 to Caps Lock, so Seil can
         translate Caps Lock to Shift for the internal but Caps Lock will still
         work on the external. -->
    <item>
        <name>F19 to Caps Lock (non-Apple Keyboards)</name>
        <identifier>private.f19ToCapsLock</identifier>
        <autogen>__KeyToKey__ KeyCode::F19, KeyCode::CAPSLOCK</autogen>
        <device_not>DeviceVendor::APPLE_INC, DeviceProduct::ANY</device_not>
    </item>

    <!-- TrulyErgonomic-specific bindings. -->

    <!-- Command_R to Control_L is built-in, but that breaks symmetry. -->
    <item>
      <name>Command_R to Control_R</name>
      <identifier>private.commandR2controlR</identifier>
      <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::CONTROL_R</autogen>
    </item>

    <!-- Note: If I ever run out of Hyper bindings, I could add F19 to this and
         have another simulated modifier (Mega?), since I now have Hyper firing
         from Ctrl+Shift.
    -->
    <item>
        <identifier>private.bind_del_to_hyper</identifier>
        <name>Del to Command_L+Option_L-Control_L-Shift_L</name>
        <appendix>Simulate a Hyper modifier a la Space Cadet via the Del key.</appendix>
        <autogen>
            __KeyToKey__
            KeyCode::FORWARD_DELETE,
            KeyCode::COMMAND_L, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L
        </autogen>
    </item>

</root>
