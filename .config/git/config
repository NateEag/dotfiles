# I keep my primary gitconfig in the secondary git config path, so ~/.gitconfig
# can be used to override settings per-machine. This is handy for working on an
# employer's machine, so you can default repos to your work email address but
# keep your other git settings. Note: Older gits will not read from this path.

[user]
	name = Nate Eagleson
	email = nate@nateeag.com

[credential]
	helper = !pass-git-helper $@

[core]
	editor = emacsclient
	excludesfile = ~/.gitignore
	eol = lf
	pager = delta --max-line-length 0

[delta]
	features = decorations
	keep-plus-minus-markers = true
	syntax-theme = Solarized (dark)

[delta "decorations"]
	hunk-header-decoration-style = plain

[push]
	default = simple

[merge]
	conflictstyle = diff3

[interactive]
	diffFilter = diff-highlight

[rebase]
    autosquash = true

[diff]
    algorithm = patience
	compactionHeuristic = true

# Make json-diff command available as a diff driver (it's installed in my
# dotfiles repo's lib/node_modules dir, and thus should always be on my path).
#
# TODO Get this working with delta - syntax coloration would be great. I'm not
# sure why delta has no effect on json-diff's output.
[diff "json-diff"]
	command = json-diff -C

[color]
	ui = true

[fetch]
	prune = true

[alias]
    oldest-ancestor = !bash -c 'diff -u <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | sed -ne \"s/^ //p\" | head -1' -
    branchdiff = !sh -c \"git diff `git oldest-ancestor`..\"
    branchlog = !sh -c \"git log `git oldest-ancestor`..\"

    # Pretty command-line history.
    graph-log = log --all --graph --oneline --decorate

	# Handy when you want to extract something from a commit message. I use it to
	# snag the closing "Issue #" line from a previous commit fairly often.
	show-commit-msg = log --format=%B -n 1

    # Useful for working gitflow-style.
    strict-merge = merge --no-commit --no-ff

	# Remind myself what files I have explicitly ignored...
	ignored = !git ls-files -v | grep "^[[:lower:]]"

	# List the unique authors in a git repo.
	list-authors = log --format="%aN" | sort -u

    # Find duplicate files. I had to tweak it for OS X because of non-portable
    # options to uniq, so it's not quite as slick as the original was. It used
    # to output all duplicate objects in the current and the path to them.
	# Original, in case your uniq has the -D and -w option:
	# !"git ls-tree -r HEAD | cut -c 13- | sort | uniq -D -w 40"
    duplicate-objects = !"git ls-tree -r HEAD | cut -c 13- | cut -c 1-40 | uniq -d"

	# List the branches that haven't gone anywhere else.
	unpushed-branches = log --branches --not --remotes --simplify-by-decoration --decorate --oneline

    # Some aliases for amending commits.
    amend = commit --amend --no-edit -a
    reword = commit --amend

	# A few aliases for making git commands easier to remember, yoinked from here:
	# https://github.com/gggritso/dotfiles/blob/master/gitconfig.symlink
	unstage = reset -q HEAD --
	uncommit = reset --mixed HEAD~
	remotes = remote -v

[color]
    interactive = true

[sendemail]
	smtpEncryption = tls
	smtpServer = smtp.gmail.com
	smtpUser = nate4d@gmail.com
	smtpServerPort = 587

[svn]
	# Make git-svn auto-delete empty directories, because that's what I think
	# makes sense.
	rmdir = true

# Note to self: sometimes you know you'll be working with multiple repositories
# over HTTPS, and the server's cert is self-signed. Rather than telling git "don't
# verify SSL connections", or "use this cert for this repo" repeatedly, copy your
# machine's global cert bundle to some private location, and add each cert you
# want to trust to that file. Then, set http.sslCAInfo to point to that file.
# That way, you'll be warned in event of man-in-the-middle attacks in future.
[pull]
	ff = only

[init]
	# "main" seems clearer and simpler than "master" or "trunk", and it's less
	# likely to offend people than "master".
	defaultBranch = main
