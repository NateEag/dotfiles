[user]
	name = Nate Eagleson
	email = nate@nateeag.com

[core]
	editor = emacsclient
	excludesfile = ~/.gitignore
	eol = lf

[push]
	default = simple

[merge]
	conflictstyle = diff3

[pager]
	# Highlight sub-line changes in my h-command aliases.
	# These lines are why the alias exists.
	hdiff = diff-highlight | less
	hshow = diff-highlight | less

[diff]
    algorithm = patience

[color]
	ui = true

[alias]
    # Handy aliases for subtree merges, based on Pro Git's commentary.
    # Add a remote for the project you're pulling in, add a branch that tracks
    # the remote, git fetch <branch>, checkout master, do
    # 'git subtree-import <path/for/subtree> <branch>, and commit.
    # Whenever you want to pull in updates from the branch, do
    # 'git subtree-merge <branch>'.
    subtree-import = !sh -c \"git read-tree --prefix="$1" -u "$2"\"
    subtree-merge = merge --squash -s subtree --no-commit

    oldest-ancestor = !bash -c 'diff -u <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | sed -ne \"s/^ //p\" | head -1' -
    branchdiff = !sh -c \"git diff `git oldest-ancestor`..\"
    branchlog = !sh -c \"git log `git oldest-ancestor`..\"

    # Pretty command-line history.
    graph-log = log --graph --pretty=oneline --decorate --abbrev-commit

	# For when you want to see diffs with changes highlighted inside lines.
	hdiff = diff
	hshow = show

    # Useful for working gitflow-style.
    strict-merge = merge --no-commit --no-ff

    # Find duplicate files. I had to tweak it for OS X because of non-portable
    # options to uniq, so it's not quite as slick as the original was. It used
    # to output all duplicate objects in the current and the path to them.
	# Original, in case your uniq has the -D and -w option:
	# !"git ls-tree -r HEAD | cut -c 13- | sort | uniq -D -w 40"
    duplicate-objects = !"git ls-tree -r HEAD | cut -c 13- | cut -c 1-40 | uniq -d"

    # Some aliases for amending commits.
    amend = commit --amend --no-edit -a
    reword = commit --amend

[color]
    interactive = true

[sendemail]
	smtpEncryption = tls
	smtpServer = smtp.gmail.com
	smtpUser = nate4d@gmail.com
	smtpServerPort = 587

# Note to self: sometimes you know you'll be working with multiple repositories
# over HTTPS, and the server's cert is self-signed. Rather than telling git "don't
# verify SSL connections", or "use this cert for this repo" repeatedly, copy your
# machine's global cert bundle to some private location, and add each cert you
# want to trust to that file. Then, set http.sslCAInfo to point to that file.
# That way, you'll be warned in event of man-in-the-middle attacks in future.
