#!/usr/bin/env zsh

_acme()
{
    local state com cur

    cur=${words[${#words[@]}]}

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    if [[ ${cur} == --* ]]; then
        state="option"
        opts=("--help:Display this help message" "--quiet:Do not output any message" "--verbose:Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug" "--version:Display this application version" "--ansi:Force ANSI output" "--no-ansi:Disable ANSI output" "--no-interaction:Do not ask any interactive question")
    elif [[ $cur == $com ]]; then
        state="command"
        coms=("hello:Complete me please." "help:Displays help for a command" "list:Lists commands" "command\:with\:colons")
    fi

    case $state in
        command)
            _describe 'command' coms
        ;;
        option)
            case "$com" in
                hello)
            opts+=("--dangerous-option:This \$hould be \`escaped\`." "--option-without-description")
            ;;
            help)
            opts+=("--xml:To output help as XML" "--format:The output format \(txt, xml, json, or md\)" "--raw:To output raw command help")
            ;;
            list)
            opts+=("--xml:To output list as XML" "--raw:To output raw command list" "--format:The output format \(txt, xml, json, or md\)")
            ;;
            command:with:colons)
            opts+=("--goodbye")
            ;;

            esac

            _describe 'option' opts
        ;;
        *)
            # fallback to file completion
            _arguments '*:file:_files'
    esac
}

compdef _acme acme
